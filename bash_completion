#!/usr/bin/env bash

# bash completion for CORTEX (CORTEX)

if ! command -v cortex &> /dev/null; then
  return
fi

__cortex_generate_completion() {
  declare current_word
  current_word="${COMP_WORDS[COMP_CWORD]}"
  # shellcheck disable=SC2207
  COMPREPLY=($(compgen -W "$1" -- "${current_word}"))
  return 0
}

__cortex_commands() {
  declare current_word
  declare command

  current_word="${COMP_WORDS[COMP_CWORD]}"

  COMMANDS='
    help install uninstall run list ls
		clean which'

  if [ ${#COMP_WORDS[@]} == 4 ]; then

    command="${COMP_WORDS[COMP_CWORD - 2]}"
    case "${command}" in
      alias) __cortex_installed_nodes ;;
    esac

  else

    case "${current_word}" in
      -*) __cortex_options ;;
      *) __cortex_generate_completion "${COMMANDS}" ;;
    esac

  fi
}

__cortex_options() {
  OPTIONS=''
  __cortex_generate_completion "${OPTIONS}"
}

__cortex_installed_nodes() {
  __cortex_generate_completion "$(cortex_ls) $(__cortex_aliases)"
}

__cortex_aliases() {
  declare aliases
  aliases=""
  if [ -d "${CORTEX_DIR}/alias" ]; then
    aliases="$(cd "${CORTEX_DIR}/alias" && command find "${PWD}" -type f | command sed "s:${PWD}/::")"
  fi
  echo "${aliases} node stable unstable iojs"
}

__cortex_alias() {
  __cortex_generate_completion "$(__cortex_aliases)"
}

__cortex() {
  declare previous_word
  previous_word="${COMP_WORDS[COMP_CWORD - 1]}"

  case "${previous_word}" in
    use | run | exec | ls | list | uninstall) __cortex_installed_nodes ;;
    alias | unalias) __cortex_alias ;;
    *) __cortex_commands ;;
  esac

  return 0
}

# complete is a bash builtin, but recent versions of ZSH come with a function
# called bashcompinit that will create a complete in ZSH. If the user is in
# ZSH, load and run bashcompinit before calling the complete function.
if [[ -n ${ZSH_VERSION-} ]]; then
  autoload -U +X bashcompinit && bashcompinit
  autoload -U +X compinit && if [[ ${ZSH_DISABLE_COMPFIX-} = true ]]; then
    compinit -u
  else
    compinit
  fi
fi

complete -o default -F __cortex cortex
